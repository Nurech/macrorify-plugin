// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Simple.flex

package org.intellij.lang.jflex.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import org.intellij.lang.jflex.JFlexElementTypes;


final class _JFlexLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int OPTIONS_AND_DECLARATIONS = 2;
  public static final int LEXICAL_RULES = 4;
  public static final int IDENTIFIER = 6;
  public static final int IDENTIFIER_REGEXP_LITERAL = 8;
  public static final int IDENTIFIER_REGEXP = 10;
  public static final int IDENTIFIER_REGEXP_IDENTIFIER = 12;
  public static final int IDENTIFIER_REGEXP_CLASS = 14;
  public static final int OPTION = 16;
  public static final int OPT_ERROR = 18;
  public static final int OPT_PARAM = 20;
  public static final int OPT_PARAMS = 22;
  public static final int OPT_CODE = 24;
  public static final int OPT_JAVA_CODE = 26;
  public static final int OPT_EXCEPTION = 28;
  public static final int OPT_BOOLEAN = 30;
  public static final int STATE = 32;
  public static final int RULE = 34;
  public static final int ACTION_REGEXP = 36;
  public static final int ACTION_REGEXP_IDENTIFIER = 38;
  public static final int ACTION_REGEXP_CLASS = 40;
  public static final int ACTION = 42;
  public static final int ACTION_JAVA_CODE = 44;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\10\u2f00\31\u1f00\1\u0100\1\u3000\1\u3100\1\u0100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00"+
    "\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100"+
    "\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900"+
    "\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u1f00\1\u4f00\1\u5000"+
    "\1\u5100\1\u5200\3\u0100\1\u5300\1\u5400\1\u5500\12\u1f00\4\u0100"+
    "\1\u5600\17\u1f00\2\u0100\1\u5700\41\u1f00\2\u0100\1\u5800\1\u5900"+
    "\2\u1f00\1\u5a00\1\u5b00\27\u0100\1\u5c00\4\u0100\1\u5d00\1\u5e00"+
    "\42\u1f00\1\u0100\1\u5f00\1\u6000\11\u1f00\1\u6100\24\u1f00\1\u6200"+
    "\1\u6300\1\u1f00\1\u6400\1\u6500\1\u6600\1\u6700\2\u1f00\1\u6800"+
    "\5\u1f00\1\u6900\1\u6a00\1\u6b00\5\u1f00\1\u6c00\1\u6d00\2\u1f00"+
    "\1\u6e00\1\u1f00\1\u6f00\14\u1f00\1\u7000\4\u1f00\246\u0100\1\u7100"+
    "\20\u0100\1\u7200\1\u7300\25\u0100\1\u7400\34\u0100\1\u7500\14\u1f00"+
    "\2\u0100\1\u7600\5\u1f00\23\u0100\1\u7700\u0aec\u1f00\1\u7800\1\u7900"+
    "\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\2\16\0\4\5"+
    "\1\1\1\6\1\7\1\5\1\10\1\11\2\5\1\12"+
    "\1\13\1\14\1\15\1\16\2\5\1\17\1\0\1\20"+
    "\4\0\1\21\1\22\1\23\1\0\2\5\1\24\1\25"+
    "\1\26\1\15\1\5\32\10\1\27\1\30\1\31\1\5"+
    "\1\10\1\5\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\10\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\10\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\6"+
    "\6\0\1\65\32\0\2\5\4\10\4\5\1\10\2\5"+
    "\1\0\7\5\1\10\4\5\1\10\5\5\27\10\1\5"+
    "\37\10\1\5\u01ca\10\4\5\14\10\16\5\5\10\7\5"+
    "\1\10\1\5\1\10\21\5\160\0\5\10\1\5\2\10"+
    "\2\5\4\10\1\5\1\10\6\5\1\10\1\5\3\10"+
    "\1\5\1\10\1\5\24\10\1\5\123\10\1\5\213\10"+
    "\1\5\5\0\2\5\246\10\1\5\46\10\2\5\1\10"+
    "\6\5\51\10\6\5\1\10\1\5\55\0\1\5\1\0"+
    "\1\5\2\0\1\5\2\0\1\5\1\0\10\5\33\10"+
    "\4\5\4\10\15\5\6\0\5\5\1\10\4\5\13\0"+
    "\1\5\1\0\3\5\53\10\37\0\4\5\2\10\1\0"+
    "\143\10\1\5\1\10\10\0\1\5\6\0\2\10\2\0"+
    "\1\5\4\0\2\10\12\0\3\10\2\5\1\10\17\5"+
    "\1\0\1\10\1\0\36\10\33\0\2\5\131\10\13\0"+
    "\1\10\16\5\12\0\41\10\11\0\2\10\4\5\1\10"+
    "\2\5\1\0\30\10\4\0\1\10\11\0\1\10\3\0"+
    "\1\10\5\0\22\5\31\10\3\0\4\5\13\10\65\5"+
    "\25\10\1\5\22\10\13\5\61\0\66\10\3\0\1\10"+
    "\22\0\1\10\7\0\12\10\2\0\2\5\12\0\1\5"+
    "\20\10\3\0\1\5\10\10\2\5\2\10\2\5\26\10"+
    "\1\5\7\10\1\5\1\10\3\5\4\10\2\5\1\0"+
    "\1\10\7\0\2\5\2\0\2\5\3\0\1\10\10\5"+
    "\1\0\4\5\2\10\1\5\3\10\2\0\2\5\12\0"+
    "\4\10\7\5\2\10\1\5\1\0\2\5\3\0\1\5"+
    "\6\10\4\5\2\10\2\5\26\10\1\5\7\10\1\5"+
    "\2\10\1\5\2\10\1\5\2\10\2\5\1\0\1\5"+
    "\5\0\4\5\2\0\2\5\3\0\3\5\1\0\7\5"+
    "\4\10\1\5\1\10\7\5\14\0\3\10\1\0\13\5"+
    "\3\0\1\5\11\10\1\5\3\10\1\5\26\10\1\5"+
    "\7\10\1\5\2\10\1\5\5\10\2\5\1\0\1\10"+
    "\10\0\1\5\3\0\1\5\3\0\2\5\1\10\17\5"+
    "\2\10\2\0\2\5\12\0\1\5\1\10\7\5\1\10"+
    "\6\0\1\5\3\0\1\5\10\10\2\5\2\10\2\5"+
    "\26\10\1\5\7\10\1\5\2\10\1\5\5\10\2\5"+
    "\1\0\1\10\7\0\2\5\2\0\2\5\3\0\7\5"+
    "\3\0\4\5\2\10\1\5\3\10\2\0\2\5\12\0"+
    "\1\5\1\10\20\5\1\0\1\10\1\5\6\10\3\5"+
    "\3\10\1\5\4\10\3\5\2\10\1\5\1\10\1\5"+
    "\2\10\3\5\2\10\3\5\3\10\3\5\14\10\4\5"+
    "\5\0\3\5\3\0\1\5\4\0\2\5\1\10\6\5"+
    "\1\0\16\5\12\0\11\5\1\10\6\5\5\0\10\10"+
    "\1\5\3\10\1\5\27\10\1\5\20\10\3\5\1\10"+
    "\7\0\1\5\3\0\1\5\4\0\7\5\2\0\1\5"+
    "\3\10\5\5\2\10\2\0\2\5\12\0\20\5\1\10"+
    "\3\0\1\5\10\10\1\5\3\10\1\5\27\10\1\5"+
    "\12\10\1\5\5\10\2\5\1\0\1\10\7\0\1\5"+
    "\3\0\1\5\4\0\7\5\2\0\7\5\1\10\1\5"+
    "\2\10\2\0\2\5\12\0\1\5\2\10\15\5\4\0"+
    "\11\10\1\5\3\10\1\5\51\10\2\0\1\10\7\0"+
    "\1\5\3\0\1\5\4\0\1\10\5\5\3\10\1\0"+
    "\7\5\3\10\2\0\2\5\12\0\12\5\6\10\1\5"+
    "\3\0\1\5\22\10\3\5\30\10\1\5\11\10\1\5"+
    "\1\10\2\5\7\10\3\5\1\0\4\5\6\0\1\5"+
    "\1\0\1\5\10\0\6\5\12\0\2\5\2\0\15\5"+
    "\60\10\1\0\2\10\7\0\4\5\10\10\10\0\1\5"+
    "\12\0\47\5\2\10\1\5\1\10\1\5\5\10\1\5"+
    "\30\10\1\5\1\10\1\5\12\10\1\0\2\10\11\0"+
    "\1\10\2\5\5\10\1\5\1\10\1\5\6\0\2\5"+
    "\12\0\2\5\4\10\40\5\1\10\27\5\2\0\6\5"+
    "\12\0\13\5\1\0\1\5\1\0\1\5\1\0\4\5"+
    "\2\0\10\10\1\5\44\10\4\5\24\0\1\5\2\0"+
    "\5\10\13\0\1\5\44\0\11\5\1\0\71\5\53\10"+
    "\24\0\1\10\12\0\6\5\6\10\4\0\4\10\3\0"+
    "\1\10\3\0\2\10\7\0\3\10\4\0\15\10\14\0"+
    "\1\10\17\0\2\5\46\10\1\5\1\10\5\5\1\10"+
    "\2\5\53\10\1\5\115\10\1\5\4\10\2\5\7\10"+
    "\1\5\1\10\1\5\4\10\2\5\51\10\1\5\4\10"+
    "\2\5\41\10\1\5\4\10\2\5\7\10\1\5\1\10"+
    "\1\5\4\10\2\5\17\10\1\5\71\10\1\5\4\10"+
    "\2\5\103\10\2\5\3\0\40\5\20\10\20\5\126\10"+
    "\2\5\6\10\3\5\u016c\10\2\5\21\10\1\5\32\10"+
    "\5\5\113\10\3\5\13\10\7\5\15\10\1\5\4\10"+
    "\3\0\13\5\22\10\3\0\13\5\22\10\2\0\14\5"+
    "\15\10\1\5\3\10\1\5\2\0\14\5\64\10\40\0"+
    "\3\5\1\10\3\5\2\10\1\0\2\5\12\0\41\5"+
    "\4\0\1\5\12\0\6\5\131\10\7\5\5\10\2\0"+
    "\42\10\1\0\1\10\5\5\106\10\12\5\37\10\1\5"+
    "\14\0\4\5\14\0\12\5\12\0\36\10\2\5\5\10"+
    "\13\5\54\10\4\5\32\10\6\5\12\0\46\5\27\10"+
    "\5\0\4\5\65\10\12\0\1\5\35\0\2\5\13\0"+
    "\6\5\12\0\15\5\1\10\10\5\16\0\1\5\2\0"+
    "\77\5\5\0\57\10\21\0\7\10\4\5\12\0\21\5"+
    "\11\0\14\5\3\0\36\10\15\0\2\10\12\0\54\10"+
    "\16\0\14\5\44\10\24\0\10\5\12\0\3\5\3\10"+
    "\12\0\44\10\2\5\11\10\7\5\53\10\2\5\3\10"+
    "\20\5\3\0\1\5\25\0\4\10\1\0\6\10\1\0"+
    "\2\10\3\0\1\10\5\5\300\10\72\0\1\5\5\0"+
    "\26\10\2\5\6\10\2\5\46\10\2\5\6\10\2\5"+
    "\10\10\1\5\1\10\1\5\1\10\1\5\1\10\1\5"+
    "\37\10\2\5\65\10\1\5\7\10\1\5\1\10\3\5"+
    "\3\10\1\5\7\10\3\5\4\10\2\5\6\10\4\5"+
    "\15\10\5\5\3\10\1\5\7\10\16\5\5\0\30\5"+
    "\2\3\5\0\20\5\2\10\23\5\1\10\13\5\5\0"+
    "\1\5\12\0\1\5\1\10\15\5\1\10\20\5\15\10"+
    "\3\5\40\10\20\5\15\0\4\5\1\0\3\5\14\0"+
    "\21\5\1\10\4\5\1\10\2\5\12\10\1\5\1\10"+
    "\3\5\5\10\6\5\1\10\1\5\1\10\1\5\1\10"+
    "\1\5\4\10\1\5\13\10\2\5\4\10\5\5\5\10"+
    "\4\5\1\10\21\5\51\10\u0177\5\57\10\1\5\57\10"+
    "\1\5\205\10\6\5\4\10\3\0\2\10\14\5\46\10"+
    "\1\5\1\10\5\5\1\10\2\5\70\10\7\5\1\10"+
    "\17\5\1\0\27\10\11\5\7\10\1\5\7\10\1\5"+
    "\7\10\1\5\7\10\1\5\7\10\1\5\7\10\1\5"+
    "\7\10\1\5\7\10\1\5\40\0\57\5\1\10\325\5"+
    "\3\10\31\5\11\10\6\0\1\5\5\10\2\5\5\10"+
    "\4\5\126\10\2\5\2\0\2\5\3\10\1\5\132\10"+
    "\1\5\4\10\5\5\53\10\1\5\136\10\21\5\40\10"+
    "\60\5\320\10\100\5\375\10\3\5\215\10\103\5\56\10"+
    "\2\5\15\10\3\5\20\10\12\0\2\10\24\5\57\10"+
    "\1\0\4\5\12\0\1\5\37\10\2\0\120\10\2\0"+
    "\45\5\11\10\2\5\147\10\2\5\65\10\2\5\11\10"+
    "\52\5\15\10\1\0\3\10\1\0\4\10\1\0\27\10"+
    "\5\0\4\5\1\0\13\5\1\10\7\5\64\10\14\5"+
    "\2\0\62\10\22\0\12\5\12\0\6\5\22\0\6\10"+
    "\3\5\1\10\1\5\2\10\13\0\34\10\10\0\2\5"+
    "\27\10\15\0\14\5\35\10\3\5\4\0\57\10\16\0"+
    "\16\5\1\10\12\0\6\5\5\10\1\0\12\10\12\0"+
    "\5\10\1\5\51\10\16\0\11\5\3\10\1\0\10\10"+
    "\2\0\2\5\12\0\6\5\27\10\3\5\1\10\3\0"+
    "\62\10\1\0\1\10\3\0\2\10\2\0\5\10\2\0"+
    "\1\10\1\0\1\10\30\5\3\10\2\5\13\10\5\0"+
    "\2\5\3\10\2\0\12\5\6\10\2\5\6\10\2\5"+
    "\6\10\11\5\7\10\1\5\7\10\1\5\53\10\1\5"+
    "\16\10\6\5\163\10\10\0\1\5\2\0\2\5\12\0"+
    "\6\5\244\10\14\5\27\10\4\5\61\10\4\5\u0100\3"+
    "\156\10\2\5\152\10\46\5\7\10\14\5\5\10\5\5"+
    "\1\10\1\0\12\10\1\5\15\10\1\5\5\10\1\5"+
    "\1\10\1\5\2\10\1\5\2\10\1\5\154\10\41\5"+
    "\153\10\22\5\100\10\2\5\66\10\50\5\15\10\3\5"+
    "\20\0\20\5\20\0\3\5\2\10\30\5\3\10\31\5"+
    "\1\10\6\5\5\10\1\5\207\10\2\5\1\0\4\5"+
    "\1\10\13\5\12\0\7\5\32\10\4\5\1\10\1\5"+
    "\32\10\13\5\131\10\3\5\6\10\2\5\6\10\2\5"+
    "\6\10\2\5\3\10\3\5\2\10\3\5\2\10\22\5"+
    "\3\0\4\5\14\10\1\5\32\10\1\5\23\10\1\5"+
    "\2\10\1\5\17\10\2\5\16\10\42\5\173\10\105\5"+
    "\65\10\210\5\1\0\202\5\35\10\3\5\61\10\17\5"+
    "\1\0\37\5\40\10\15\5\36\10\5\5\46\10\5\0"+
    "\5\5\36\10\2\5\44\10\4\5\10\10\1\5\5\10"+
    "\52\5\236\10\2\5\12\0\6\5\44\10\4\5\44\10"+
    "\4\5\50\10\10\5\64\10\234\5\67\10\11\5\26\10"+
    "\12\5\10\10\230\5\6\10\2\5\1\10\1\5\54\10"+
    "\1\5\2\10\3\5\1\10\2\5\27\10\12\5\27\10"+
    "\11\5\37\10\101\5\23\10\1\5\2\10\12\5\26\10"+
    "\12\5\32\10\106\5\70\10\6\5\2\10\100\5\1\10"+
    "\3\0\1\5\2\0\5\5\4\0\4\10\1\5\3\10"+
    "\1\5\35\10\2\5\3\0\4\5\1\0\40\5\35\10"+
    "\3\5\35\10\43\5\10\10\1\5\34\10\2\0\31\5"+
    "\66\10\12\5\26\10\12\5\23\10\15\5\22\10\156\5"+
    "\111\10\67\5\63\10\15\5\63\10\15\5\44\10\4\0"+
    "\10\5\12\0\u0146\5\52\10\1\5\2\0\3\5\2\10"+
    "\116\5\35\10\12\5\1\10\10\5\26\10\13\0\137\5"+
    "\25\10\33\5\27\10\11\5\3\0\65\10\17\0\37\5"+
    "\12\0\17\5\4\0\55\10\13\0\2\5\1\0\17\5"+
    "\1\0\2\5\31\10\7\5\12\0\6\5\3\0\44\10"+
    "\16\0\1\5\12\0\4\5\1\10\2\0\1\10\10\5"+
    "\43\10\1\0\2\5\1\10\11\5\3\0\60\10\16\0"+
    "\4\10\4\5\4\0\1\5\14\0\1\10\1\5\1\10"+
    "\43\5\22\10\1\5\31\10\14\0\6\5\1\0\101\5"+
    "\7\10\1\5\1\10\1\5\4\10\1\5\17\10\1\5"+
    "\12\10\7\5\57\10\14\0\5\5\12\0\6\5\4\0"+
    "\1\5\10\10\2\5\2\10\2\5\26\10\1\5\7\10"+
    "\1\5\2\10\1\5\5\10\1\5\2\0\1\10\7\0"+
    "\2\5\2\0\2\5\3\0\2\5\1\10\6\5\1\0"+
    "\5\5\5\10\2\0\2\5\7\0\3\5\5\0\213\5"+
    "\65\10\22\0\4\10\5\5\12\0\4\5\1\0\3\10"+
    "\36\5\60\10\24\0\2\10\1\5\1\10\10\5\12\0"+
    "\246\5\57\10\7\0\2\5\11\0\27\5\4\10\2\0"+
    "\42\5\60\10\21\0\3\5\1\10\13\5\12\0\46\5"+
    "\53\10\15\0\1\10\7\5\12\0\66\5\33\10\2\5"+
    "\17\0\4\5\12\0\306\5\54\10\17\0\145\5\100\10"+
    "\12\0\25\5\10\10\2\5\1\10\2\5\10\10\1\5"+
    "\2\10\1\5\30\10\6\0\1\5\2\0\2\5\4\0"+
    "\1\10\1\0\1\10\2\0\14\5\12\0\106\5\10\10"+
    "\2\5\47\10\7\0\2\5\7\0\1\10\1\5\1\10"+
    "\1\0\33\5\1\10\12\0\50\10\7\0\1\10\4\0"+
    "\10\5\1\0\10\5\1\10\13\0\56\10\20\0\3\5"+
    "\1\10\42\5\71\10\7\5\11\10\1\5\45\10\10\0"+
    "\1\5\10\0\1\10\17\5\12\0\30\5\36\10\2\5"+
    "\26\0\1\5\16\0\111\5\7\10\1\5\2\10\1\5"+
    "\46\10\6\0\3\5\1\0\1\5\2\0\1\5\7\0"+
    "\1\10\1\0\10\5\12\0\6\5\6\10\1\5\2\10"+
    "\1\5\40\10\5\0\1\5\2\0\1\5\5\0\1\10"+
    "\7\5\12\0\u0136\5\23\10\4\0\271\5\1\10\54\5"+
    "\4\10\37\5\232\10\146\5\157\10\21\5\304\10\274\5"+
    "\57\10\1\5\11\0\307\5\107\10\271\5\71\10\7\5"+
    "\37\10\1\5\12\0\146\5\36\10\2\5\5\0\13\5"+
    "\60\10\7\0\11\5\4\10\14\5\12\0\11\5\25\10"+
    "\5\5\23\10\260\5\100\10\200\5\113\10\4\5\1\0"+
    "\1\10\67\0\7\5\4\0\15\10\100\5\2\10\1\5"+
    "\1\10\1\0\13\5\2\0\16\5\370\10\10\5\326\10"+
    "\52\5\11\10\367\5\37\10\61\5\3\10\21\5\4\10"+
    "\10\5\u018c\10\4\5\153\10\5\5\15\10\3\5\11\10"+
    "\7\5\12\10\3\5\2\0\1\5\4\0\301\5\5\0"+
    "\3\5\26\0\2\5\7\0\36\5\4\0\224\5\3\0"+
    "\273\5\125\10\1\5\107\10\1\5\2\10\2\5\1\10"+
    "\2\5\2\10\2\5\4\10\1\5\14\10\1\5\1\10"+
    "\1\5\7\10\1\5\101\10\1\5\4\10\2\5\10\10"+
    "\1\5\7\10\1\5\34\10\1\5\4\10\1\5\5\10"+
    "\1\5\1\10\3\5\7\10\1\5\u0154\10\2\5\31\10"+
    "\1\5\31\10\1\5\37\10\1\5\31\10\1\5\37\10"+
    "\1\5\31\10\1\5\37\10\1\5\31\10\1\5\37\10"+
    "\1\5\31\10\1\5\10\10\2\5\151\0\4\5\62\0"+
    "\10\5\1\0\16\5\1\0\26\5\5\0\1\5\17\0"+
    "\120\5\7\0\1\5\21\0\2\5\7\0\1\5\2\0"+
    "\1\5\5\0\325\5\55\10\3\5\7\0\7\10\2\5"+
    "\12\0\4\5\1\10\u0171\5\54\10\16\0\5\5\306\10"+
    "\13\5\7\0\51\5\104\10\7\0\1\10\4\5\12\0"+
    "\u0156\5\1\10\117\5\4\10\1\5\33\10\1\5\2\10"+
    "\1\5\1\10\2\5\1\10\1\5\12\10\1\5\4\10"+
    "\1\5\1\10\1\5\1\10\6\5\1\10\4\5\1\10"+
    "\1\5\1\10\1\5\1\10\1\5\3\10\1\5\2\10"+
    "\1\5\1\10\2\5\1\10\1\5\1\10\1\5\1\10"+
    "\1\5\1\10\1\5\1\10\1\5\2\10\1\5\1\10"+
    "\2\5\4\10\1\5\7\10\1\5\4\10\1\5\4\10"+
    "\1\5\1\10\1\5\12\10\1\5\21\10\5\5\3\10"+
    "\1\5\5\10\1\5\21\10\u0134\5\12\0\6\5\336\10"+
    "\42\5\65\10\13\5\336\10\2\5\u0182\10\16\5\u0131\10"+
    "\37\5\36\10\342\5\113\10\266\5\1\0\36\5\140\0"+
    "\200\5\360\0\20\5";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[31232];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\27\0\3\1\1\2\2\3\1\4\1\5\1\2\1\6"+
    "\2\7\1\6\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\3\1\17\1\15\1\20\1\21\1\22\1\23"+
    "\1\15\1\24\1\25\1\26\1\27\1\30\3\31\1\32"+
    "\1\33\1\34\15\33\1\35\2\33\1\36\1\33\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\3\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\2\61\1\63\1\64\1\7\1\65"+
    "\1\66\1\67\2\70\1\6\1\71\1\72\1\73\1\74"+
    "\1\75\1\76\1\74\1\77\1\100\1\101\1\102\1\74"+
    "\1\103\1\104\1\105\1\106\1\107\1\110\3\111\1\112"+
    "\1\113\1\114\1\103\2\115\1\116\1\117\1\120\1\0"+
    "\1\121\1\0\1\122\2\0\1\123\1\0\1\124\2\0"+
    "\1\125\43\0\1\126\4\0\1\127\2\0\1\130\3\0"+
    "\1\131\5\0\1\124\1\125\13\0\1\132\1\0\1\133"+
    "\10\0\1\134\23\0\1\130\1\135\1\131\1\0\1\122"+
    "\1\0\1\123\1\0\1\136\1\137\5\0\1\140\12\0"+
    "\1\141\4\0\1\142\2\0\1\143\1\0\1\144\6\0"+
    "\1\145\7\0\1\146\1\0\1\127\1\122\1\123\1\147"+
    "\3\0\1\150\1\0\1\151\3\0\1\152\4\0\1\153"+
    "\13\0\1\154\1\0\1\155\2\0\1\156\3\0\1\157"+
    "\1\127\4\0\1\160\1\0\1\161\2\0\1\162\11\0"+
    "\1\163\2\0\1\164\1\0\1\165\11\0\1\166\3\0"+
    "\1\167\1\0\1\170\1\171\1\172\2\0\1\173\1\0"+
    "\1\174\2\0\1\175\1\176\1\177\1\200\1\201\12\0"+
    "\1\202\1\203\2\0\1\204\1\205\1\206\1\207\1\210"+
    "\1\211";

  private static int [] zzUnpackAction() {
    int [] result = new int[421];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\330\0\u010e\0\u0144\0\u017a"+
    "\0\u01b0\0\u01e6\0\u021c\0\u0252\0\u0288\0\u02be\0\u02f4\0\u032a"+
    "\0\u0360\0\u0396\0\u03cc\0\u0402\0\u0438\0\u046e\0\u04a4\0\u04da"+
    "\0\u0510\0\u0546\0\u04da\0\u057c\0\u05b2\0\u05e8\0\u061e\0\u0654"+
    "\0\u04da\0\u068a\0\u06c0\0\u06f6\0\u04da\0\u072c\0\u04da\0\u04da"+
    "\0\u0762\0\u04da\0\u0798\0\u07ce\0\u04da\0\u0804\0\u04da\0\u04da"+
    "\0\u04da\0\u04da\0\u083a\0\u04da\0\u04da\0\u04da\0\u0870\0\u04da"+
    "\0\u04da\0\u08a6\0\u08dc\0\u04da\0\u04da\0\u0912\0\u0948\0\u097e"+
    "\0\u09b4\0\u09ea\0\u0a20\0\u0a56\0\u0a8c\0\u0ac2\0\u0af8\0\u0b2e"+
    "\0\u0b64\0\u0b9a\0\u0bd0\0\u0c06\0\u0c3c\0\u0c72\0\u0ca8\0\u0cde"+
    "\0\u04da\0\u04da\0\u04da\0\u0d14\0\u0d4a\0\u04da\0\u0d80\0\u0db6"+
    "\0\u04da\0\u04da\0\u04da\0\u04da\0\u0dec\0\u0e22\0\u04da\0\u0e58"+
    "\0\u0e8e\0\u04da\0\u04da\0\u04da\0\u04da\0\u0ec4\0\u0efa\0\u0f30"+
    "\0\u04da\0\u0f66\0\u0f9c\0\u0fd2\0\u04da\0\u04da\0\u1008\0\u103e"+
    "\0\u1074\0\u04da\0\u10aa\0\u04da\0\u04da\0\u10e0\0\u04da\0\u1116"+
    "\0\u04da\0\u04da\0\u04da\0\u04da\0\u114c\0\u1182\0\u04da\0\u04da"+
    "\0\u11b8\0\u04da\0\u04da\0\u04da\0\u11ee\0\u1224\0\u04da\0\u04da"+
    "\0\u125a\0\u04da\0\u04da\0\u1290\0\u04da\0\u04da\0\u04da\0\u12c6"+
    "\0\u04da\0\u12fc\0\u1332\0\u1368\0\u139e\0\u13d4\0\u0804\0\u04da"+
    "\0\u140a\0\u08a6\0\u04da\0\u1440\0\u1476\0\u14ac\0\u14e2\0\u1518"+
    "\0\u154e\0\u1584\0\u15ba\0\u15f0\0\u1626\0\u165c\0\u1692\0\u16c8"+
    "\0\u16fe\0\u1734\0\u176a\0\u17a0\0\u17d6\0\u180c\0\u1842\0\u1878"+
    "\0\u18ae\0\u18e4\0\u191a\0\u1950\0\u1986\0\u19bc\0\u19f2\0\u1a28"+
    "\0\u1a5e\0\u1a94\0\u1aca\0\u1b00\0\u1b36\0\u1b6c\0\u04da\0\u1ba2"+
    "\0\u1bd8\0\u1c0e\0\u1c44\0\u1c7a\0\u1cb0\0\u1116\0\u04da\0\u1ce6"+
    "\0\u1d1c\0\u11ee\0\u04da\0\u1d52\0\u1d88\0\u1dbe\0\u1df4\0\u1e2a"+
    "\0\u0804\0\u08a6\0\u1e60\0\u1e96\0\u1ecc\0\u1f02\0\u1f38\0\u1f6e"+
    "\0\u1fa4\0\u1fda\0\u2010\0\u2046\0\u207c\0\u20b2\0\u20e8\0\u211e"+
    "\0\u2154\0\u218a\0\u21c0\0\u21f6\0\u222c\0\u2262\0\u2298\0\u22ce"+
    "\0\u2304\0\u233a\0\u2370\0\u23a6\0\u23dc\0\u2412\0\u2448\0\u247e"+
    "\0\u24b4\0\u24ea\0\u2520\0\u2556\0\u258c\0\u25c2\0\u25f8\0\u262e"+
    "\0\u2664\0\u269a\0\u26d0\0\u2706\0\u1116\0\u04da\0\u11ee\0\u273c"+
    "\0\u1d88\0\u2772\0\u1df4\0\u27a8\0\u04da\0\u04da\0\u27de\0\u2814"+
    "\0\u284a\0\u2880\0\u28b6\0\u04da\0\u28ec\0\u2922\0\u2958\0\u298e"+
    "\0\u29c4\0\u29fa\0\u2a30\0\u2a66\0\u2a9c\0\u2ad2\0\u04da\0\u2b08"+
    "\0\u2b3e\0\u2b74\0\u2baa\0\u2be0\0\u2c16\0\u2c4c\0\u04da\0\u2c82"+
    "\0\u04da\0\u2cb8\0\u2cee\0\u2d24\0\u2d5a\0\u2d90\0\u2dc6\0\u04da"+
    "\0\u2dfc\0\u2e32\0\u2e68\0\u2e9e\0\u2ed4\0\u2f0a\0\u2f40\0\u04da"+
    "\0\u2f76\0\u26d0\0\u04da\0\u04da\0\u04da\0\u2fac\0\u2fe2\0\u3018"+
    "\0\u04da\0\u304e\0\u04da\0\u3084\0\u30ba\0\u30f0\0\u04da\0\u3126"+
    "\0\u315c\0\u3192\0\u31c8\0\u04da\0\u31fe\0\u3234\0\u326a\0\u32a0"+
    "\0\u32d6\0\u330c\0\u3342\0\u3378\0\u33ae\0\u33e4\0\u341a\0\u04da"+
    "\0\u3450\0\u04da\0\u3486\0\u34bc\0\u04da\0\u34f2\0\u3528\0\u355e"+
    "\0\u04da\0\u04da\0\u3594\0\u35ca\0\u3600\0\u3636\0\u04da\0\u366c"+
    "\0\u04da\0\u36a2\0\u36d8\0\u04da\0\u370e\0\u3744\0\u377a\0\u37b0"+
    "\0\u37e6\0\u381c\0\u3852\0\u3888\0\u38be\0\u04da\0\u38f4\0\u392a"+
    "\0\u04da\0\u3960\0\u04da\0\u3996\0\u39cc\0\u3a02\0\u3a38\0\u3a6e"+
    "\0\u3aa4\0\u3ada\0\u3b10\0\u3b46\0\u04da\0\u3b7c\0\u3bb2\0\u3be8"+
    "\0\u04da\0\u3c1e\0\u04da\0\u04da\0\u04da\0\u3c54\0\u3c8a\0\u04da"+
    "\0\u3cc0\0\u04da\0\u3cf6\0\u3d2c\0\u04da\0\u04da\0\u04da\0\u04da"+
    "\0\u04da\0\u3d62\0\u3d98\0\u3dce\0\u3e04\0\u3e3a\0\u3e70\0\u3ea6"+
    "\0\u3edc\0\u3f12\0\u3f48\0\u04da\0\u04da\0\u3f7e\0\u3fb4\0\u04da"+
    "\0\u04da\0\u04da\0\u04da\0\u04da\0\u04da";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[421];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\30\2\31\1\0\1\31\4\30\1\32\53\30\1\0"+
    "\1\33\1\34\1\35\1\0\1\35\3\33\1\36\1\37"+
    "\5\33\1\40\12\33\30\36\3\33\1\0\1\41\1\42"+
    "\1\43\1\0\1\43\12\41\1\44\4\41\1\45\40\41"+
    "\1\0\1\33\1\46\3\0\20\33\1\47\37\33\1\0"+
    "\1\50\1\51\3\0\60\50\1\0\1\52\1\53\1\54"+
    "\2\0\1\52\1\55\1\56\2\52\1\57\1\60\2\61"+
    "\11\52\1\62\1\63\31\52\1\64\1\65\1\52\1\0"+
    "\2\66\1\54\2\0\3\66\1\67\21\66\30\67\2\66"+
    "\1\70\1\0\2\71\1\54\2\0\2\71\1\72\20\71"+
    "\1\73\1\74\33\71\1\0\1\75\1\76\1\54\2\0"+
    "\13\75\1\77\1\75\1\100\1\101\6\75\1\102\1\103"+
    "\1\104\1\105\1\106\1\107\2\75\1\110\1\75\1\111"+
    "\1\75\1\112\1\75\1\113\1\75\1\114\1\115\1\116"+
    "\2\75\1\117\1\120\1\75\1\121\1\75\1\122\1\0"+
    "\1\75\1\76\1\54\2\0\60\75\1\0\1\123\1\124"+
    "\1\54\2\0\3\123\1\125\21\123\30\125\3\123\1\0"+
    "\1\126\1\127\1\54\2\0\3\126\1\130\5\126\1\131"+
    "\13\126\30\130\3\126\1\0\2\132\1\54\2\0\55\132"+
    "\1\121\1\132\1\133\1\0\1\134\2\135\1\0\1\135"+
    "\4\134\1\136\53\134\1\0\1\137\1\140\1\54\2\0"+
    "\3\137\1\141\5\137\1\142\13\137\30\141\1\143\1\137"+
    "\1\144\1\0\1\145\1\146\1\54\2\0\32\145\1\147"+
    "\13\145\1\150\11\145\1\0\1\151\1\152\1\153\2\0"+
    "\3\151\1\154\5\151\1\155\7\151\1\156\3\151\30\154"+
    "\3\151\1\0\1\41\1\157\1\160\1\0\1\160\12\41"+
    "\1\161\4\41\1\162\35\41\1\163\1\41\1\164\1\0"+
    "\1\165\1\166\1\153\2\0\1\165\1\167\1\170\2\165"+
    "\1\171\1\172\2\173\11\165\1\174\1\175\31\165\1\176"+
    "\1\177\1\165\1\0\2\200\3\0\3\200\1\201\21\200"+
    "\30\201\1\202\1\200\1\203\1\0\2\204\1\153\2\0"+
    "\2\204\1\205\20\204\1\206\1\207\33\204\1\0\1\210"+
    "\2\211\1\0\1\211\55\210\1\212\2\210\1\0\1\213"+
    "\2\214\1\0\1\214\55\213\1\215\1\213\1\216\70\0"+
    "\2\31\1\0\1\31\72\0\1\217\55\0\1\34\1\35"+
    "\1\0\1\35\12\0\1\220\47\0\2\35\1\0\1\35"+
    "\61\0\1\36\7\0\1\36\7\0\4\36\6\0\30\36"+
    "\3\0\1\36\11\0\1\221\70\0\1\222\2\0\1\223"+
    "\47\0\1\42\1\43\1\0\1\43\12\0\1\224\47\0"+
    "\2\43\1\0\1\43\75\0\1\225\2\0\1\226\47\0"+
    "\1\46\65\0\1\51\65\0\1\53\66\0\1\54\63\0"+
    "\2\227\1\0\4\227\1\230\20\227\1\231\35\227\2\52"+
    "\1\0\63\52\1\67\7\0\1\67\7\0\4\67\6\0"+
    "\30\67\3\0\1\67\2\232\1\0\4\232\1\233\20\232"+
    "\1\234\35\232\2\71\1\0\63\71\1\0\1\76\105\0"+
    "\1\235\77\0\1\236\65\0\1\237\65\0\1\240\14\0"+
    "\1\241\71\0\1\242\3\0\1\243\37\0\1\244\6\0"+
    "\1\245\2\0\1\246\2\0\1\247\4\0\1\250\47\0"+
    "\1\251\76\0\1\252\7\0\1\253\50\0\1\254\11\0"+
    "\1\255\51\0\1\256\4\0\1\257\1\260\61\0\1\261"+
    "\72\0\1\262\50\0\1\263\21\0\1\264\45\0\1\265"+
    "\16\0\1\266\2\0\1\267\41\0\1\270\25\0\1\271"+
    "\53\0\1\272\71\0\1\273\73\0\1\274\6\0\1\124"+
    "\64\0\1\125\7\0\1\125\7\0\4\125\6\0\30\125"+
    "\3\0\1\125\1\0\1\127\64\0\1\130\7\0\1\130"+
    "\7\0\4\130\6\0\30\130\3\0\1\130\1\0\2\135"+
    "\1\0\1\135\117\0\1\275\3\0\1\276\21\0\1\277"+
    "\2\0\1\140\64\0\1\141\7\0\1\141\7\0\4\141"+
    "\6\0\30\141\3\0\1\141\1\0\1\146\116\0\1\300"+
    "\104\0\1\301\15\0\1\152\66\0\1\153\63\0\1\154"+
    "\7\0\1\154\7\0\4\154\6\0\30\154\3\0\1\154"+
    "\1\0\1\157\1\160\1\0\1\160\12\0\1\302\47\0"+
    "\2\160\1\0\1\160\75\0\1\303\2\0\1\304\56\0"+
    "\1\305\21\0\30\305\5\0\1\166\64\0\2\306\1\0"+
    "\4\306\1\307\20\306\1\310\35\306\2\165\1\0\63\165"+
    "\10\0\1\311\21\0\30\311\4\0\1\201\7\0\1\201"+
    "\7\0\4\201\6\0\30\201\3\0\1\201\2\312\1\0"+
    "\4\312\1\313\20\312\1\314\35\312\2\204\1\0\63\204"+
    "\1\0\2\211\1\0\1\211\62\0\2\214\1\0\1\214"+
    "\100\0\1\223\46\0\14\315\1\316\51\315\2\223\3\0"+
    "\60\223\20\0\1\226\46\0\14\317\1\320\51\317\2\226"+
    "\3\0\60\226\1\0\2\227\1\0\4\227\1\321\20\227"+
    "\1\231\35\227\2\232\1\0\4\232\1\322\20\232\1\234"+
    "\35\232\33\0\1\323\74\0\1\324\65\0\1\325\75\0"+
    "\1\326\55\0\1\327\62\0\1\330\60\0\1\331\105\0"+
    "\1\332\45\0\1\333\65\0\1\334\77\0\1\335\71\0"+
    "\1\336\50\0\1\337\71\0\1\340\101\0\1\341\60\0"+
    "\1\342\63\0\1\343\1\0\1\344\65\0\1\345\67\0"+
    "\1\346\51\0\1\347\5\0\1\350\10\0\1\351\60\0"+
    "\1\352\72\0\1\353\46\0\1\354\64\0\1\355\64\0"+
    "\1\356\65\0\1\357\75\0\1\360\56\0\1\361\102\0"+
    "\1\362\57\0\1\363\76\0\1\364\50\0\1\365\5\0"+
    "\1\366\70\0\1\367\64\0\1\370\63\0\1\371\75\0"+
    "\1\372\30\0\1\304\46\0\14\373\1\374\51\373\2\304"+
    "\3\0\60\304\1\0\1\305\7\0\1\305\7\0\4\305"+
    "\6\0\30\305\2\0\1\41\1\305\2\306\1\0\4\306"+
    "\1\375\20\306\1\310\35\306\1\311\7\0\1\311\7\0"+
    "\4\311\6\0\30\311\2\0\1\376\1\311\2\312\1\0"+
    "\4\312\1\377\20\312\1\314\35\312\14\315\1\u0100\65\315"+
    "\1\u0100\2\315\1\u0101\46\315\14\317\1\u0102\65\317\1\u0102"+
    "\2\317\1\u0103\46\317\42\0\1\u0104\76\0\1\u0105\65\0"+
    "\1\u0106\65\0\1\u0107\62\0\1\u0108\54\0\1\u0109\62\0"+
    "\1\u010a\67\0\1\u010b\100\0\1\u010c\66\0\1\u010d\67\0"+
    "\1\u010e\46\0\1\u010f\14\0\1\u0110\67\0\1\u0111\45\0"+
    "\1\u0112\16\0\1\u0113\1\0\1\u0114\46\0\1\u0115\61\0"+
    "\1\u0116\77\0\1\u0117\55\0\1\u0118\100\0\1\u0119\62\0"+
    "\1\u011a\65\0\1\u011b\74\0\1\u011c\50\0\1\u011d\17\0"+
    "\1\u011e\45\0\1\u011f\103\0\1\u0120\54\0\1\u0121\66\0"+
    "\1\u0122\67\0\1\u0123\65\0\1\u0124\4\0\1\u0125\65\0"+
    "\1\u0126\56\0\1\u0127\57\0\1\u0128\63\0\1\u0129\63\0"+
    "\1\u012a\102\0\1\u012b\54\0\1\u012c\66\0\1\u012d\70\0"+
    "\1\u012e\75\0\1\u012f\51\0\1\u0130\27\0\14\373\1\u0131"+
    "\65\373\1\u0131\2\373\1\u0132\46\373\14\315\1\u0100\2\315"+
    "\1\u0133\46\315\14\317\1\u0102\2\317\1\u0134\46\317\53\0"+
    "\1\u0135\63\0\1\u0136\65\0\1\u0137\52\0\1\u0138\63\0"+
    "\1\u0139\75\0\1\u013a\73\0\1\u013b\60\0\1\u013c\56\0"+
    "\1\u013d\107\0\1\u013e\45\0\1\u013f\71\0\1\u0140\62\0"+
    "\1\u0141\56\0\1\u0142\101\0\1\u0143\63\0\1\u0144\74\0"+
    "\1\u0145\63\0\1\u0146\52\0\1\u0147\103\0\1\u0148\64\0"+
    "\1\u0149\52\0\1\u014a\76\0\1\u014b\62\0\1\u014c\61\0"+
    "\1\u014d\61\0\1\u014e\64\0\1\u014f\66\0\1\u0150\63\0"+
    "\1\u0151\67\0\1\u0152\76\0\1\u0153\71\0\1\u0154\51\0"+
    "\1\u0155\105\0\1\u0156\63\0\1\u0157\6\0\1\277\54\0"+
    "\1\u0158\50\0\1\u0159\27\0\14\373\1\u0131\2\373\1\u015a"+
    "\46\373\32\0\1\u015b\75\0\1\u015c\74\0\1\u015d\52\0"+
    "\1\u015e\75\0\1\u015f\52\0\1\u0160\77\0\1\u0161\67\0"+
    "\1\u0162\67\0\1\u0163\60\0\1\u0164\56\0\1\u0165\72\0"+
    "\1\u0166\61\0\1\u0167\74\0\1\u0168\55\0\1\u0169\71\0"+
    "\1\u016a\62\0\1\u016b\61\0\1\u016c\75\0\1\u016d\57\0"+
    "\1\u016e\102\0\1\u016f\46\0\1\u0170\74\0\1\u0171\61\0"+
    "\1\u0172\66\0\1\u0173\102\0\1\u0174\44\0\1\u0175\117\0"+
    "\1\277\35\0\1\u0176\106\0\1\u0177\62\0\1\u0178\65\0"+
    "\1\u0179\67\0\1\u017a\63\0\1\u017b\62\0\1\u017c\70\0"+
    "\1\u017d\62\0\1\u017e\52\0\1\u017f\67\0\1\u0180\65\0"+
    "\1\u0181\100\0\1\u0182\65\0\1\u0183\64\0\1\u0184\74\0"+
    "\1\u0185\57\0\1\u0186\60\0\1\u0187\57\0\1\u0188\70\0"+
    "\1\u0189\70\0\1\u0158\74\0\1\u018a\44\0\1\u018b\75\0"+
    "\1\u018c\75\0\1\u018d\53\0\1\u018e\63\0\1\u018f\105\0"+
    "\1\u0190\55\0\1\u0191\51\0\1\u0192\101\0\1\u0193\66\0"+
    "\1\u0194\65\0\1\u0195\65\0\1\u0196\67\0\1\u0197\67\0"+
    "\1\u0198\73\0\1\u0199\56\0\1\u019a\66\0\1\u019b\70\0"+
    "\1\u019c\60\0\1\u019d\62\0\1\u019e\66\0\1\u019f\54\0"+
    "\1\u01a0\65\0\1\u01a1\65\0\1\u01a2\101\0\1\u01a3\51\0"+
    "\1\u01a4\105\0\1\u01a5\7\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[16362];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\27\0\1\11\2\1\1\11\5\1\1\11\3\1\1\11"+
    "\1\1\2\11\1\1\1\11\2\1\1\11\1\1\4\11"+
    "\1\1\3\11\1\1\2\11\2\1\2\11\23\1\3\11"+
    "\2\1\1\11\2\1\4\11\2\1\1\11\2\1\4\11"+
    "\3\1\1\11\3\1\2\11\3\1\1\11\1\1\2\11"+
    "\1\1\1\11\1\1\4\11\2\1\2\11\1\1\3\11"+
    "\2\1\2\11\1\1\2\11\1\1\3\11\1\0\1\11"+
    "\1\0\1\1\2\0\1\1\1\0\1\11\2\0\1\11"+
    "\43\0\1\11\4\0\1\1\2\0\1\11\3\0\1\11"+
    "\5\0\2\1\13\0\1\1\1\0\1\1\10\0\1\1"+
    "\23\0\1\1\1\11\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\2\11\5\0\1\11\12\0\1\11\4\0\1\1"+
    "\2\0\1\11\1\0\1\11\6\0\1\11\7\0\1\11"+
    "\1\0\1\1\3\11\3\0\1\11\1\0\1\11\3\0"+
    "\1\11\4\0\1\11\13\0\1\11\1\0\1\11\2\0"+
    "\1\11\3\0\2\11\4\0\1\11\1\0\1\11\2\0"+
    "\1\11\11\0\1\11\2\0\1\11\1\0\1\11\11\0"+
    "\1\11\3\0\1\11\1\0\3\11\2\0\1\11\1\0"+
    "\1\11\2\0\5\11\12\0\2\11\2\0\6\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[421];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private int braceCounter = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _JFlexLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { yybegin(YYINITIAL); return JFlexElementTypes.JAVA_CODE;
            }
          // fall through
          case 138: break;
          case 2:
            { yybegin(OPTIONS_AND_DECLARATIONS); return JFlexElementTypes.BAD_CHARACTER;
            }
          // fall through
          case 139: break;
          case 3:
            { yybegin(OPTIONS_AND_DECLARATIONS); return JFlexElementTypes.WHITE_SPACE;
            }
          // fall through
          case 140: break;
          case 4:
            { yybegin(IDENTIFIER); return JFlexElementTypes.MACROS;
            }
          // fall through
          case 141: break;
          case 5:
            { yybegin(OPTION); return JFlexElementTypes.OPTION_SIGN;
            }
          // fall through
          case 142: break;
          case 6:
            { yybegin(ACTION_REGEXP); yypushback(yylength());
            }
          // fall through
          case 143: break;
          case 7:
            { yybegin(LEXICAL_RULES); return JFlexElementTypes.WHITE_SPACE;
            }
          // fall through
          case 144: break;
          case 8:
            { yybegin(STATE); return JFlexElementTypes.STATE_LEFT_ANGLE_BRACKET;
            }
          // fall through
          case 145: break;
          case 9:
            { yybegin(IDENTIFIER); return JFlexElementTypes.WHITE_SPACE;
            }
          // fall through
          case 146: break;
          case 10:
            { yybegin(IDENTIFIER_REGEXP_LITERAL); return JFlexElementTypes.EQ;
            }
          // fall through
          case 147: break;
          case 11:
            { yybegin(IDENTIFIER_REGEXP); yypushback(yylength());
            }
          // fall through
          case 148: break;
          case 12:
            { yybegin(IDENTIFIER_REGEXP_LITERAL); return JFlexElementTypes.WHITE_SPACE;
            }
          // fall through
          case 149: break;
          case 13:
            { yybegin(IDENTIFIER_REGEXP); return JFlexElementTypes.REGEXP_SYMBOL;
            }
          // fall through
          case 150: break;
          case 14:
            { yybegin(IDENTIFIER_REGEXP); return JFlexElementTypes.REGEXP_WHITE_SPACE;
            }
          // fall through
          case 151: break;
          case 15:
            { yybegin(IDENTIFIER_REGEXP); return JFlexElementTypes.REGEXP_PREFIX;
            }
          // fall through
          case 152: break;
          case 16:
            { yybegin(IDENTIFIER_REGEXP); return JFlexElementTypes.REGEXP_LEFT_PARENTHESIS;
            }
          // fall through
          case 153: break;
          case 17:
            { yybegin(IDENTIFIER_REGEXP); return JFlexElementTypes.REGEXP_RIGHT_PARENTHESIS;
            }
          // fall through
          case 154: break;
          case 18:
            { yybegin(IDENTIFIER_REGEXP); return JFlexElementTypes.REGEXP_POSTFIX;
            }
          // fall through
          case 155: break;
          case 19:
            { yybegin(IDENTIFIER_REGEXP_CLASS); return JFlexElementTypes.REGEXP_LEFT_BRACKET;
            }
          // fall through
          case 156: break;
          case 20:
            { yybegin(IDENTIFIER_REGEXP_IDENTIFIER); return JFlexElementTypes.REGEXP_LEFT_BRACE;
            }
          // fall through
          case 157: break;
          case 21:
            { yybegin(IDENTIFIER_REGEXP); return JFlexElementTypes.REGEXP_OR;
            }
          // fall through
          case 158: break;
          case 22:
            { yybegin(IDENTIFIER_REGEXP); return JFlexElementTypes.BAD_CHARACTER;
            }
          // fall through
          case 159: break;
          case 23:
            { yybegin(IDENTIFIER_REGEXP_IDENTIFIER); return JFlexElementTypes.REGEXP_MACROS_REF;
            }
          // fall through
          case 160: break;
          case 24:
            { yybegin(IDENTIFIER_REGEXP); return JFlexElementTypes.REGEXP_RIGHT_BRACE;
            }
          // fall through
          case 161: break;
          case 25:
            { yybegin(IDENTIFIER_REGEXP_CLASS); return JFlexElementTypes.REGEXP_CLASS_SYMBOL;
            }
          // fall through
          case 162: break;
          case 26:
            { yybegin(IDENTIFIER_REGEXP); return JFlexElementTypes.REGEXP_RIGHT_BRACKET;
            }
          // fall through
          case 163: break;
          case 27:
            { yybegin(OPT_ERROR); return JFlexElementTypes.BAD_CHARACTER;
            }
          // fall through
          case 164: break;
          case 28:
            { yybegin(OPT_ERROR); return JFlexElementTypes.OPTION_WHITE_SPACE;
            }
          // fall through
          case 165: break;
          case 29:
            { yybegin(OPT_PARAMS); return JFlexElementTypes.S_KEYWORD;
            }
          // fall through
          case 166: break;
          case 30:
            { yybegin(OPT_PARAMS); return JFlexElementTypes.X_KEYWORD;
            }
          // fall through
          case 167: break;
          case 31:
            { yybegin(OPT_JAVA_CODE); return JFlexElementTypes.OPTION_LEFT_BRACE;
            }
          // fall through
          case 168: break;
          case 32:
            { yybegin(OPTIONS_AND_DECLARATIONS); return JFlexElementTypes.OPTION_RIGHT_BRACE;
            }
          // fall through
          case 169: break;
          case 33:
            { yybegin(OPT_PARAM); return JFlexElementTypes.BAD_CHARACTER;
            }
          // fall through
          case 170: break;
          case 34:
            { yybegin(OPT_PARAM); return JFlexElementTypes.OPTION_WHITE_SPACE;
            }
          // fall through
          case 171: break;
          case 35:
            { yybegin(OPT_PARAM); return JFlexElementTypes.OPTION_PARAMETER;
            }
          // fall through
          case 172: break;
          case 36:
            { yybegin(OPT_PARAMS); return JFlexElementTypes.BAD_CHARACTER;
            }
          // fall through
          case 173: break;
          case 37:
            { yybegin(OPT_PARAMS); return JFlexElementTypes.OPTION_WHITE_SPACE;
            }
          // fall through
          case 174: break;
          case 38:
            { yybegin(OPT_PARAMS); return JFlexElementTypes.OPTION_PARAMETER;
            }
          // fall through
          case 175: break;
          case 39:
            { yybegin(OPT_PARAMS); return JFlexElementTypes.OPTION_COMMA;
            }
          // fall through
          case 176: break;
          case 40:
            { yybegin(OPT_CODE); return JFlexElementTypes.BAD_CHARACTER;
            }
          // fall through
          case 177: break;
          case 41:
            { yybegin(OPT_CODE); return JFlexElementTypes.OPTION_RIGHT_BRACE;
            }
          // fall through
          case 178: break;
          case 42:
            { yybegin(OPT_JAVA_CODE); return JFlexElementTypes.JAVA_CODE;
            }
          // fall through
          case 179: break;
          case 43:
            { yybegin(OPT_EXCEPTION); return JFlexElementTypes.BAD_CHARACTER;
            }
          // fall through
          case 180: break;
          case 44:
            { yybegin(OPT_EXCEPTION); return JFlexElementTypes.OPTION_WHITE_SPACE;
            }
          // fall through
          case 181: break;
          case 45:
            { yybegin(OPT_EXCEPTION); return JFlexElementTypes.OPTION_PARAMETER;
            }
          // fall through
          case 182: break;
          case 46:
            { yybegin(OPT_EXCEPTION); return JFlexElementTypes.OPTION_COMMA;
            }
          // fall through
          case 183: break;
          case 47:
            { yybegin(OPT_EXCEPTION); return JFlexElementTypes.OPTION_LEFT_BRACE;
            }
          // fall through
          case 184: break;
          case 48:
            { yybegin(OPT_EXCEPTION); return JFlexElementTypes.OPTION_RIGHT_BRACE;
            }
          // fall through
          case 185: break;
          case 49:
            { yybegin(OPT_BOOLEAN); return JFlexElementTypes.BAD_CHARACTER;
            }
          // fall through
          case 186: break;
          case 50:
            { yybegin(OPT_BOOLEAN); return JFlexElementTypes.OPTION_WHITE_SPACE;
            }
          // fall through
          case 187: break;
          case 51:
            { yybegin(STATE); return JFlexElementTypes.BAD_CHARACTER;
            }
          // fall through
          case 188: break;
          case 52:
            { yybegin(STATE); return JFlexElementTypes.WHITE_SPACE;
            }
          // fall through
          case 189: break;
          case 53:
            { yybegin(STATE); return JFlexElementTypes.STATE_REF;
            }
          // fall through
          case 190: break;
          case 54:
            { yybegin(STATE); return JFlexElementTypes.STATE_COMMA;
            }
          // fall through
          case 191: break;
          case 55:
            { yybegin(RULE); return JFlexElementTypes.STATE_LEFT_ANGLE_BRACKET;
            }
          // fall through
          case 192: break;
          case 56:
            { yybegin(RULE); return JFlexElementTypes.WHITE_SPACE;
            }
          // fall through
          case 193: break;
          case 57:
            { yybegin(STATE); return JFlexElementTypes.STATE_RIGHT_ANGLE_BRACKET;
            }
          // fall through
          case 194: break;
          case 58:
            { yybegin(RULE); return JFlexElementTypes.LEFT_BRACE;
            }
          // fall through
          case 195: break;
          case 59:
            { yybegin(LEXICAL_RULES); return JFlexElementTypes.RIGHT_BRACE;
            }
          // fall through
          case 196: break;
          case 60:
            { yybegin(ACTION_REGEXP); return JFlexElementTypes.REGEXP_SYMBOL;
            }
          // fall through
          case 197: break;
          case 61:
            { yybegin(ACTION_REGEXP); return JFlexElementTypes.WHITE_SPACE;
            }
          // fall through
          case 198: break;
          case 62:
            { yybegin(ACTION_REGEXP); return JFlexElementTypes.REGEXP_PREFIX;
            }
          // fall through
          case 199: break;
          case 63:
            { yybegin(ACTION_REGEXP); return JFlexElementTypes.REGEXP_LEFT_PARENTHESIS;
            }
          // fall through
          case 200: break;
          case 64:
            { yybegin(ACTION_REGEXP); return JFlexElementTypes.REGEXP_RIGHT_PARENTHESIS;
            }
          // fall through
          case 201: break;
          case 65:
            { yybegin(ACTION_REGEXP); return JFlexElementTypes.REGEXP_POSTFIX;
            }
          // fall through
          case 202: break;
          case 66:
            { yybegin(ACTION_REGEXP_CLASS); return JFlexElementTypes.REGEXP_LEFT_BRACKET;
            }
          // fall through
          case 203: break;
          case 67:
            { braceCounter = 0; yybegin(ACTION_JAVA_CODE); return JFlexElementTypes.LEFT_BRACE;
            }
          // fall through
          case 204: break;
          case 68:
            { yybegin(ACTION_REGEXP); return JFlexElementTypes.REGEXP_OR;
            }
          // fall through
          case 205: break;
          case 69:
            { yybegin(ACTION_REGEXP); return JFlexElementTypes.BAD_CHARACTER;
            }
          // fall through
          case 206: break;
          case 70:
            { yybegin(ACTION_REGEXP_IDENTIFIER); return JFlexElementTypes.REGEXP_MACROS_REF;
            }
          // fall through
          case 207: break;
          case 71:
            { yybegin(ACTION_REGEXP_IDENTIFIER); return JFlexElementTypes.REGEXP_LEFT_BRACE;
            }
          // fall through
          case 208: break;
          case 72:
            { yybegin(ACTION_REGEXP); return JFlexElementTypes.REGEXP_RIGHT_BRACE;
            }
          // fall through
          case 209: break;
          case 73:
            { yybegin(ACTION_REGEXP_CLASS); return JFlexElementTypes.REGEXP_CLASS_SYMBOL;
            }
          // fall through
          case 210: break;
          case 74:
            { yybegin(ACTION_REGEXP); return JFlexElementTypes.REGEXP_RIGHT_BRACKET;
            }
          // fall through
          case 211: break;
          case 75:
            { yybegin(RULE); return JFlexElementTypes.BAD_CHARACTER;
            }
          // fall through
          case 212: break;
          case 76:
            { yybegin(ACTION); return JFlexElementTypes.WHITE_SPACE;
            }
          // fall through
          case 213: break;
          case 77:
            { yybegin(ACTION_JAVA_CODE); return JFlexElementTypes.JAVA_CODE;
            }
          // fall through
          case 214: break;
          case 78:
            { braceCounter++; yybegin(ACTION_JAVA_CODE); return JFlexElementTypes.JAVA_CODE;
            }
          // fall through
          case 215: break;
          case 79:
            { braceCounter--; if (braceCounter < 0) {yybegin(RULE); return JFlexElementTypes.RIGHT_BRACE; } else { yybegin(ACTION_JAVA_CODE); return JFlexElementTypes.JAVA_CODE; }
            }
          // fall through
          case 216: break;
          case 80:
            { yybegin(OPTIONS_AND_DECLARATIONS); return JFlexElementTypes.SECTION_SIGN;
            }
          // fall through
          case 217: break;
          case 81:
            { yybegin(LEXICAL_RULES); return JFlexElementTypes.SECTION_SIGN;
            }
          // fall through
          case 218: break;
          case 82:
            { yybegin(OPTIONS_AND_DECLARATIONS); return JFlexElementTypes.COMMENT;
            }
          // fall through
          case 219: break;
          case 83:
            { yybegin(LEXICAL_RULES); return JFlexElementTypes.COMMENT;
            }
          // fall through
          case 220: break;
          case 84:
            { yybegin(IDENTIFIER_REGEXP); return JFlexElementTypes.REGEXP_STRING_LITERAL;
            }
          // fall through
          case 221: break;
          case 85:
            { yybegin(IDENTIFIER_REGEXP_CLASS); return JFlexElementTypes.REGEXP_STRING_LITERAL;
            }
          // fall through
          case 222: break;
          case 86:
            { yybegin(OPTIONS_AND_DECLARATIONS); yypushback(yylength());
            }
          // fall through
          case 223: break;
          case 87:
            { yybegin(RULE); return JFlexElementTypes.COMMENT;
            }
          // fall through
          case 224: break;
          case 88:
            { yybegin(ACTION_REGEXP); return JFlexElementTypes.REGEXP_STRING_LITERAL;
            }
          // fall through
          case 225: break;
          case 89:
            { yybegin(ACTION_REGEXP_CLASS); return JFlexElementTypes.REGEXP_STRING_LITERAL;
            }
          // fall through
          case 226: break;
          case 90:
            { yybegin(OPTIONS_AND_DECLARATIONS); return JFlexElementTypes.CUP_KEYWORD;
            }
          // fall through
          case 227: break;
          case 91:
            { yybegin(OPT_CODE); return JFlexElementTypes.EOF_KEYWORD;
            }
          // fall through
          case 228: break;
          case 92:
            { yybegin(OPTIONS_AND_DECLARATIONS); return JFlexElementTypes.INT_KEYWORD;
            }
          // fall through
          case 229: break;
          case 93:
            { yybegin(ACTION_REGEXP_IDENTIFIER); yypushback(yylength());
            }
          // fall through
          case 230: break;
          case 94:
            { yybegin(OPTIONS_AND_DECLARATIONS); return JFlexElementTypes._7BIT_KEYWORD;
            }
          // fall through
          case 231: break;
          case 95:
            { yybegin(OPTIONS_AND_DECLARATIONS); return JFlexElementTypes._8BIT_KEYWORD;
            }
          // fall through
          case 232: break;
          case 96:
            { yybegin(OPTIONS_AND_DECLARATIONS); return JFlexElementTypes.CHAR_KEYWORD;
            }
          // fall through
          case 233: break;
          case 97:
            { yybegin(OPTIONS_AND_DECLARATIONS); return JFlexElementTypes.FULL_KEYWORD;
            }
          // fall through
          case 234: break;
          case 98:
            { yybegin(OPT_CODE); return JFlexElementTypes.INIT_KEYWORD;
            }
          // fall through
          case 235: break;
          case 99:
            { yybegin(OPTIONS_AND_DECLARATIONS); return JFlexElementTypes.LINE_KEYWORD;
            }
          // fall through
          case 236: break;
          case 100:
            { yybegin(OPTIONS_AND_DECLARATIONS); return JFlexElementTypes.PACK_KEYWORD;
            }
          // fall through
          case 237: break;
          case 101:
            { yybegin(OPT_PARAM); return JFlexElementTypes.TYPE_KEYWORD;
            }
          // fall through
          case 238: break;
          case 102:
            { yybegin(OPT_BOOLEAN); return JFlexElementTypes.TRUE_KEYWORD;
            }
          // fall through
          case 239: break;
          case 103:
            { yybegin(OPTIONS_AND_DECLARATIONS); return JFlexElementTypes._16BIT_KEYWORD;
            }
          // fall through
          case 240: break;
          case 104:
            { yybegin(OPTIONS_AND_DECLARATIONS); return JFlexElementTypes.BYACC_KEYWORD;
            }
          // fall through
          case 241: break;
          case 105:
            { yybegin(OPT_PARAM); return JFlexElementTypes.CLASS_KEYWORD;
            }
          // fall through
          case 242: break;
          case 106:
            { yybegin(OPTIONS_AND_DECLARATIONS); return JFlexElementTypes.DEBUG_KEYWORD;
            }
          // fall through
          case 243: break;
          case 107:
            { yybegin(OPTIONS_AND_DECLARATIONS); return JFlexElementTypes.FINAL_KEYWORD;
            }
          // fall through
          case 244: break;
          case 108:
            { yybegin(OPT_PARAMS); return JFlexElementTypes.STATE_KEYWORD;
            }
          // fall through
          case 245: break;
          case 109:
            { yybegin(OPTIONS_AND_DECLARATIONS); return JFlexElementTypes.TABLE_KEYWORD;
            }
          // fall through
          case 246: break;
          case 110:
            { yybegin(OPTIONS_AND_DECLARATIONS); return JFlexElementTypes.YYEOF_KEYWORD;
            }
          // fall through
          case 247: break;
          case 111:
            { yybegin(OPT_BOOLEAN); return JFlexElementTypes.FALSE_KEYWORD;
            }
          // fall through
          case 248: break;
          case 112:
            { yybegin(OPTIONS_AND_DECLARATIONS); return JFlexElementTypes.COLUMN_KEYWORD;
            }
          // fall through
          case 249: break;
          case 113:
            { yybegin(OPT_PARAM); return JFlexElementTypes.CUPSYM_KEYWORD;
            }
          // fall through
          case 250: break;
          case 114:
            { yybegin(OPT_CODE); return JFlexElementTypes.EOFVAL_KEYWORD;
            }
          // fall through
          case 251: break;
          case 115:
            { yybegin(OPTIONS_AND_DECLARATIONS); return JFlexElementTypes.PUBLIC_KEYWORD;
            }
          // fall through
          case 252: break;
          case 116:
            { yybegin(OPTIONS_AND_DECLARATIONS); return JFlexElementTypes.SWITCH_KEYWORD;
            }
          // fall through
          case 253: break;
          case 117:
            { yybegin(OPT_PARAMS); return JFlexElementTypes.XSTATE_KEYWORD;
            }
          // fall through
          case 254: break;
          case 118:
            { yybegin(OPT_PARAM); return JFlexElementTypes.EXTENDS_KEYWORD;
            }
          // fall through
          case 255: break;
          case 119:
            { yybegin(OPT_PARAM); return JFlexElementTypes.INCLUDE_KEYWORD;
            }
          // fall through
          case 256: break;
          case 120:
            { yybegin(OPTIONS_AND_DECLARATIONS); return JFlexElementTypes.INTEGER_KEYWORD;
            }
          // fall through
          case 257: break;
          case 121:
            { yybegin(OPTIONS_AND_DECLARATIONS); return JFlexElementTypes.INTWRAP_KEYWORD;
            }
          // fall through
          case 258: break;
          case 122:
            { yybegin(OPTIONS_AND_DECLARATIONS); return JFlexElementTypes.NOTUNIX_KEYWORD;
            }
          // fall through
          case 259: break;
          case 123:
            { yybegin(OPTIONS_AND_DECLARATIONS); return JFlexElementTypes.UNICODE_KEYWORD;
            }
          // fall through
          case 260: break;
          case 124:
            { yybegin(OPTIONS_AND_DECLARATIONS); return JFlexElementTypes.ABSTRACT_KEYWORD;
            }
          // fall through
          case 261: break;
          case 125:
            { yybegin(OPTIONS_AND_DECLARATIONS); return JFlexElementTypes.CASELESS_KEYWORD;
            }
          // fall through
          case 262: break;
          case 126:
            { yybegin(OPTIONS_AND_DECLARATIONS); return JFlexElementTypes.CUPDEBUG_KEYWORD;
            }
          // fall through
          case 263: break;
          case 127:
            { yybegin(OPT_BOOLEAN); return JFlexElementTypes.EOFCLOSE_KEYWORD;
            }
          // fall through
          case 264: break;
          case 128:
            { yybegin(OPT_EXCEPTION); return JFlexElementTypes.EOFTHROW_KEYWORD;
            }
          // fall through
          case 265: break;
          case 129:
            { yybegin(OPT_PARAM); return JFlexElementTypes.FUNCTION_KEYWORD;
            }
          // fall through
          case 266: break;
          case 130:
            { yybegin(OPT_EXCEPTION); return JFlexElementTypes.INITTHROW_KEYWORD;
            }
          // fall through
          case 267: break;
          case 131:
            { yybegin(OPT_PARAM); return JFlexElementTypes.SCANERROR_KEYWORD;
            }
          // fall through
          case 268: break;
          case 132:
            { yybegin(OPTIONS_AND_DECLARATIONS); return JFlexElementTypes.APIPRIVATE_KEYWORD;
            }
          // fall through
          case 269: break;
          case 133:
            { yybegin(OPT_PARAM); return JFlexElementTypes.BUFFERSIZE_KEYWORD;
            }
          // fall through
          case 270: break;
          case 134:
            { yybegin(OPTIONS_AND_DECLARATIONS); return JFlexElementTypes.IGNORECASE_KEYWORD;
            }
          // fall through
          case 271: break;
          case 135:
            { yybegin(OPT_PARAMS); return JFlexElementTypes.IMPLEMENTS_KEYWORD;
            }
          // fall through
          case 272: break;
          case 136:
            { yybegin(OPTIONS_AND_DECLARATIONS); return JFlexElementTypes.STANDALONE_KEYWORD;
            }
          // fall through
          case 273: break;
          case 137:
            { yybegin(OPT_EXCEPTION); return JFlexElementTypes.YYLEXTHROW_KEYWORD;
            }
          // fall through
          case 274: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
